(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var random_1 = require("./utils/random");
var canvas = document.createElement('canvas');
var slider = document.createElement('input');
var gl = canvas.getContext('webgl');
if (gl == null) {
    throw new Error('gl context could not be obtained');
}
if (gl.getExtension('OES_texture_float') == null) {
    throw new Error('FLOAT Texture extension not available');
}
var RADIUS = 12;
var AREA = [800, 450];
var SIDE = 16;
var bufDimensions = [SIDE, SIDE];
var COUNT = bufDimensions[0] * bufDimensions[1];
var positions = new Float32Array(COUNT * 4);
var velocities = new Float32Array(COUNT * 4);
for (var i = 0; i < positions.length; i += 4) {
    positions[i] = AREA[0] / 2;
    positions[i + 1] = 0;
    velocities[i] = random_1.randNum(-300, 300);
    velocities[i + 1] = random_1.randNum(100, 600);
}
var settings = {
    K: 0.09,
    G: 980,
    color: [.2, .4, .8],
};
var vsrc = "\nprecision mediump float;\n\nattribute vec2 a_vertices;\n\nvoid main () {\n  gl_Position = vec4(a_vertices, 1.0, 1.0);\n}\n";
var fsrc = "\nprecision mediump float;\n\nuniform float u_time;\nuniform float u_K;\nuniform vec3 u_color;\nuniform sampler2D u_positions;\n\nconst float RADIUS = " + RADIUS + ".;\nconst float FRACTION = 1. / " + SIDE + ".;\n\nfloat sdf_sphere ( float r, vec2 c, vec2 p ) {\n  return distance(p, c) - r;\n}\n\nvoid main () {\n  vec2 p = gl_FragCoord.xy;\n  vec2 pos;\n  vec2 tex_coord;\n  float dist = 0.;\n\n  for ( float i = 0.; i < 1.; i += FRACTION ) {\n    for ( float j = 0.; j < 1.; j += FRACTION ) {\n      tex_coord.x = i;\n      tex_coord.y = j;\n      pos = texture2D(u_positions, tex_coord).xy;\n      // THIS IS SLOW because using pos requires the texture read to actually be done\n      dist += exp(-u_K * sdf_sphere(RADIUS, pos, p));\n    }\n    if ( dist >= 1. ) break;\n  }\n  dist = -log(dist) / u_K;\n  float opacity = clamp(.5 - dist, 0.0, 1.0);\n\n  gl_FragColor = vec4(u_color, opacity);\n}\n";
var vertex = gl.createShader(gl.VERTEX_SHADER);
var fragment = gl.createShader(gl.FRAGMENT_SHADER);
var program = gl.createProgram();
var screenQuad = new Float32Array([
    -1, 1, -1, -1, 1, -1,
    -1, 1, 1, -1, 1, 1
]);
var quadSize = screenQuad.length / 2;
if (vertex == null && fragment == null && program == null) {
    throw new Error('gl resources could not be obtained');
}
gl.shaderSource(vertex, vsrc);
gl.compileShader(vertex);
gl.shaderSource(fragment, fsrc);
gl.compileShader(fragment);
gl.attachShader(program, vertex);
gl.attachShader(program, fragment);
gl.linkProgram(program);
gl.useProgram(program);
if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.log(gl.getShaderInfoLog(vertex));
    console.log(gl.getShaderInfoLog(fragment));
    console.log(gl.getProgramInfoLog(program));
}
var verticesBuffer = gl.createBuffer();
var a_locations = {
    a_vertices: gl.getAttribLocation(program, 'a_vertices')
};
var u_locations = {
    u_K: gl.getUniformLocation(program, 'u_K'),
    u_color: gl.getUniformLocation(program, 'u_color'),
    u_time: gl.getUniformLocation(program, 'u_time'),
    u_positions: gl.getUniformLocation(program, 'u_positions')
};
var ps = gl.createTexture();
// const pfb = gl.createFrameBuffer()
gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);
gl.enableVertexAttribArray(a_locations.a_vertices);
gl.vertexAttribPointer(a_locations.a_vertices, 2, gl.FLOAT, false, 0, 0);
gl.bufferData(gl.ARRAY_BUFFER, screenQuad, gl.STATIC_DRAW);
gl.activeTexture(gl.TEXTURE0);
gl.bindTexture(gl.TEXTURE_2D, ps);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, bufDimensions[0], bufDimensions[1], 0, gl.RGBA, gl.FLOAT, positions);
// gl.bindFramebuffer(gl.FRAMEBUFFER, pfb)
// gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, ps, 0)
slider.type = 'range';
slider.min = '0';
slider.max = '1000';
slider.step = '50';
slider.value = settings.G.toString();
slider.addEventListener('input', function (_) { return settings.G = Number(slider.value); });
canvas.width = AREA[0];
canvas.height = AREA[1];
canvas.style.boxSizing = 'border-box';
canvas.style.border = '2px solid Coral';
document.body.style.margin = '0';
document.body.style.backgroundColor = 'MistyRose';
document.body.appendChild(canvas);
document.body.appendChild(slider);
gl.viewport(0, 0, AREA[0], AREA[1]);
gl.enable(gl.CULL_FACE);
gl.clearColor(0, 0, 0, 0);
gl.useProgram(program);
var raf = window.requestAnimationFrame;
var clock = { then: Date.now(), now: Date.now() };
raf(function render() {
    clock.then = clock.now;
    clock.now = Date.now();
    for (var i = 0, G = -settings.G, dT = (clock.now - clock.then) / 1000; i < positions.length; i += 4) {
        if (positions[i + 1] < Math.random() * -100) {
            velocities[i + 1] = random_1.randNum(600, 900);
            positions[i] = AREA[0] / 2;
            positions[i + 1] = 0;
        }
        else {
            velocities[i + 1] += dT * G;
            positions[i] += dT * velocities[i];
            positions[i + 1] += dT * velocities[i + 1];
        }
    }
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.uniform1f(u_locations.u_time, clock.now);
    gl.uniform1f(u_locations.u_K, settings.K);
    gl.uniform3f(u_locations.u_color, settings.color[0], settings.color[1], settings.color[2]);
    gl.uniform1i(u_locations.u_positions, 0);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, bufDimensions[0], bufDimensions[1], 0, gl.RGBA, gl.FLOAT, positions);
    gl.drawArrays(gl.TRIANGLES, 0, quadSize);
    raf(render);
});

},{"./utils/random":2}],2:[function(require,module,exports){
"use strict";
function randInt(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}
exports.randInt = randInt;
function randNum(min, max) {
    return Math.random() * (max - min) + min;
}
exports.randNum = randNum;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
