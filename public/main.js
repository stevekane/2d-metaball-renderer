(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/// <reference path="../typings/index.d.ts" />
"use strict";
var random_1 = require("./utils/random");
var canvas = document.createElement('canvas');
var gl = canvas.getContext('webgl');
if (gl == null) {
    throw new Error('gl context could not be obtained');
}
if (gl.getExtension('OES_texture_float') == null) {
    throw new Error('FLOAT Texture extension not available');
}
var settings = {
    K: 0.2,
    G: 2000,
    R: .02,
    cellSize: 3,
    color: [.2, .4, .8],
};
var COUNT = 1024;
var positions = new Float32Array(COUNT * 4);
var velocities = new Float32Array(COUNT * 4);
var AREA_X = 400;
var AREA_Y = 400;
var BUCKET_X = 32;
var BUCKET_Y = 32;
var BUCKET_COUNT = BUCKET_X * BUCKET_Y;
var MAX_PARTICLES_PER_BUCKET = 256;
var activeIndices = new Int32Array(BUCKET_COUNT);
var pSorted = new Float32Array(BUCKET_COUNT * MAX_PARTICLES_PER_BUCKET * 4);
var vsrc = "\nprecision mediump float;\n\nattribute vec2 a_vertices;\n\nvoid main () {\n  gl_Position = vec4(a_vertices, 1.0, 1.0);\n}\n";
var fsrc = "\nprecision mediump float;\n\nuniform float u_time;\nuniform float u_K;\nuniform float u_R;\nuniform vec3 u_color;\nuniform float u_bucket;\nuniform sampler2D u_positions;\n\nconst float DX = 1. / " + MAX_PARTICLES_PER_BUCKET + ".;\nconst float DY = 1. / " + BUCKET_COUNT + ".;\nconst float BUCKET_X = " + BUCKET_X + ".;\nconst float BUCKET_Y = " + BUCKET_Y + ".;\nconst float AREA_X = " + AREA_X + ".;\nconst float AREA_Y = " + AREA_Y + ".;\n\nfloat sdf_sphere ( float r, vec2 c, vec2 p ) {\n  return distance(p, c) - r;\n}\n\nfloat to_bucket_index ( vec2 p ) {\n  return floor(max(0., p.x / (AREA_X / BUCKET_X))) +\n         floor(max(0., p.y / (AREA_Y / BUCKET_Y))) * BUCKET_Y;\n}\n\nvoid main () {\n  vec2 p = gl_FragCoord.xy;\n  vec2 pos;\n  vec2 tex_coord;\n  vec4 particle;\n  float bucket_index = to_bucket_index(p);\n  float weight = 0.;\n  float dist = 0.;\n\n  for ( float i = 0.; i < 1.; i += DX ) {\n    tex_coord.x = i;\n    tex_coord.y = bucket_index * DY;\n    particle = texture2D(u_positions, tex_coord);\n    pos = particle.xy;\n    weight = particle.w;\n    dist += weight * exp(-u_K * sdf_sphere(u_R, pos, p));\n  }\n  dist = log(dist) / u_K;\n  float opacity = step(0., dist);\n  gl_FragColor = vec4(u_color, opacity);\n}\n";
var vertex = gl.createShader(gl.VERTEX_SHADER);
var fragment = gl.createShader(gl.FRAGMENT_SHADER);
var program = gl.createProgram();
var screenQuad = new Float32Array([
    -1, 1, -1, -1, 1, -1,
    -1, 1, 1, -1, 1, 1
]);
var quadSize = screenQuad.length / 2;
if (vertex == null && fragment == null && program == null) {
    throw new Error('gl resources could not be obtained');
}
gl.shaderSource(vertex, vsrc);
gl.compileShader(vertex);
gl.shaderSource(fragment, fsrc);
gl.compileShader(fragment);
gl.attachShader(program, vertex);
gl.attachShader(program, fragment);
gl.linkProgram(program);
gl.useProgram(program);
if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.log(gl.getShaderInfoLog(vertex));
    console.log(gl.getShaderInfoLog(fragment));
    console.log(gl.getProgramInfoLog(program));
}
var verticesBuffer = gl.createBuffer();
var a_locations = {
    a_vertices: gl.getAttribLocation(program, 'a_vertices')
};
var u_locations = {
    u_K: gl.getUniformLocation(program, 'u_K'),
    u_R: gl.getUniformLocation(program, 'u_R'),
    u_color: gl.getUniformLocation(program, 'u_color'),
    u_time: gl.getUniformLocation(program, 'u_time'),
    u_positions: gl.getUniformLocation(program, 'u_positions'),
    u_bucket: gl.getUniformLocation(program, 'u_bucket')
};
var ps = gl.createTexture();
gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);
gl.enableVertexAttribArray(a_locations.a_vertices);
gl.vertexAttribPointer(a_locations.a_vertices, 2, gl.FLOAT, false, 0, 0);
gl.bufferData(gl.ARRAY_BUFFER, screenQuad, gl.STATIC_DRAW);
gl.activeTexture(gl.TEXTURE0);
gl.bindTexture(gl.TEXTURE_2D, ps);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, MAX_PARTICLES_PER_BUCKET, BUCKET_COUNT, 0, gl.RGBA, gl.FLOAT, pSorted);
canvas.width = AREA_X;
canvas.height = AREA_Y;
canvas.style.boxSizing = 'border-box';
canvas.style.border = '2px solid Coral';
document.body.style.margin = '0';
document.body.style.backgroundColor = 'MistyRose';
document.body.appendChild(canvas);
gl.viewport(0, 0, AREA_X, AREA_Y);
gl.enable(gl.CULL_FACE);
gl.disable(gl.DEPTH_TEST);
gl.clearColor(0, 0, 0, 0);
gl.useProgram(program);
var raf = window.requestAnimationFrame;
var clock = { then: Date.now(), now: Date.now() };
for (var i = 0; i < positions.length; i += 4) {
    positions[i] = random_1.randNum(0, AREA_X);
    positions[i + 1] = random_1.randNum(0, AREA_Y);
}
function getBucketIndex(x, y) {
    if (x < 0 || y > AREA_X)
        return -1;
    else if (y < 0 || y > AREA_Y)
        return -1;
    else
        return Math.floor(Math.max(0, x / (AREA_X / BUCKET_X))) +
            Math.floor(Math.max(0, y / (AREA_Y / BUCKET_Y))) * BUCKET_Y;
}
raf(function render() {
    clock.then = clock.now;
    clock.now = Date.now();
    activeIndices.fill(0);
    pSorted.fill(0);
    for (var i = 0, G = -settings.G, dT = 0.01; i < positions.length; i += 4) {
        if (positions[i + 1] < Math.random() * -100) {
            velocities[i] = random_1.randNum(-200, 200);
            velocities[i + 1] = random_1.randNum(800, 1200);
            positions[i] = AREA_X / 2;
            positions[i + 1] = 0;
        }
        else {
            velocities[i + 1] += dT * G;
            positions[i] += dT * velocities[i];
            positions[i + 1] += dT * velocities[i + 1];
        }
        var px = positions[i];
        var py = positions[i + 1];
        var bIndex = getBucketIndex(px, py);
        if (bIndex == -1)
            continue;
        for (var k = -settings.cellSize; k <= settings.cellSize; k++) {
            for (var l = -settings.cellSize; l <= settings.cellSize; l++) {
                var index = bIndex - l - k * BUCKET_X;
                var aIndex = activeIndices[index];
                if (aIndex == null)
                    continue;
                var bStart = index * MAX_PARTICLES_PER_BUCKET * 4;
                var aOffset = aIndex * 4;
                var sIndex = bStart + aOffset;
                pSorted[sIndex] = px;
                pSorted[sIndex + 1] = py;
                pSorted[sIndex + 3] = 1;
                activeIndices[index] = Math.min(aIndex + 1, MAX_PARTICLES_PER_BUCKET - 1);
            }
        }
    }
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.uniform1f(u_locations.u_time, clock.now);
    gl.uniform1f(u_locations.u_K, settings.K);
    gl.uniform1f(u_locations.u_R, settings.R);
    gl.uniform3f(u_locations.u_color, settings.color[0], settings.color[1], settings.color[2]);
    gl.uniform1i(u_locations.u_positions, 0);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, MAX_PARTICLES_PER_BUCKET, BUCKET_COUNT, 0, gl.RGBA, gl.FLOAT, pSorted);
    gl.drawArrays(gl.TRIANGLES, 0, quadSize);
    raf(render);
});

},{"./utils/random":2}],2:[function(require,module,exports){
"use strict";
function randInt(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}
exports.randInt = randInt;
function randNum(min, max) {
    return Math.random() * (max - min) + min;
}
exports.randNum = randNum;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
