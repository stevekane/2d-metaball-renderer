(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var random_1 = require("./utils/random");
var range_1 = require("./utils/range");
var SPHERE_COUNT = 400;
var AREA = [800, 450];
var radii = new Float32Array(SPHERE_COUNT);
var positions = new Float32Array(2 * SPHERE_COUNT);
var velocities = new Float32Array(2 * SPHERE_COUNT);
var settings = {
    K: 0.1,
    color: [.2, .4, .8]
};
for (var i = 0; i < SPHERE_COUNT; i++) {
    radii[i] = random_1.randInt(4, 30);
    positions[i * 2] = random_1.randInt(0, AREA[0]);
    positions[i * 2 + 1] = random_1.randInt(0, AREA[1]);
    velocities[i * 2] = random_1.randInt(-4, 4);
    velocities[i * 2 + 1] = random_1.randInt(-4, 4);
}
var vsrc = "\nprecision mediump float;\n\nattribute vec2 a_vertices;\n\nvoid main () {\n  gl_Position = vec4(a_vertices, 1.0, 1.0);\n}\n";
var fsrc = "\nprecision mediump float;\n\nuniform vec2 u_resolution;\nuniform float u_time;\nuniform float u_K;\nuniform vec3 u_color;\nuniform float u_radii [ " + SPHERE_COUNT + " ];\nuniform vec2 u_positions [ " + SPHERE_COUNT + " ];\n\nfloat sdf_sphere ( float r, vec2 c, vec2 p ) {\n  return distance(p, c) - r;\n}\n\nvoid main () {\n  vec2 p = gl_FragCoord.xy;\n  float dist = 0.;\n\n  for ( int i = 0; i < " + SPHERE_COUNT + "; i++ ) {\n    dist += exp(-u_K * sdf_sphere(u_radii[i], u_positions[i], p));\n  }\n  dist = -log(dist) / u_K;\n  float opacity = clamp(.5 - dist, 0.0, 1.0);\n\n  gl_FragColor = vec4(u_color, opacity);\n}\n";
var canvas = document.createElement('canvas');
var slider = document.createElement('input');
var gl = canvas.getContext('webgl');
if (gl == null) {
    throw new Error('gl context could not be obtained');
}
var vertex = gl.createShader(gl.VERTEX_SHADER);
var fragment = gl.createShader(gl.FRAGMENT_SHADER);
var program = gl.createProgram();
var screenQuad = new Float32Array([
    -1, 1, -1, -1, 1, -1,
    -1, 1, 1, -1, 1, 1
]);
var quadSize = screenQuad.length / 2;
if (vertex == null && fragment == null && program == null) {
    throw new Error('gl resources could not be obtained');
}
gl.shaderSource(vertex, vsrc);
gl.compileShader(vertex);
gl.shaderSource(fragment, fsrc);
gl.compileShader(fragment);
gl.attachShader(program, vertex);
gl.attachShader(program, fragment);
gl.linkProgram(program);
gl.useProgram(program);
if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.log(gl.getShaderInfoLog(vertex));
    console.log(gl.getShaderInfoLog(fragment));
    console.log(gl.getProgramInfoLog(program));
}
var verticesBuffer = gl.createBuffer();
var a_locations = {
    a_vertices: gl.getAttribLocation(program, 'a_vertices')
};
var u_locations = {
    u_K: gl.getUniformLocation(program, 'u_K'),
    u_color: gl.getUniformLocation(program, 'u_color'),
    u_time: gl.getUniformLocation(program, 'u_time'),
    u_resolution: gl.getUniformLocation(program, 'u_resolution'),
    u_radii: gl.getUniformLocation(program, 'u_radii'),
    u_positions: gl.getUniformLocation(program, 'u_positions')
};
gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);
gl.enableVertexAttribArray(a_locations.a_vertices);
gl.vertexAttribPointer(a_locations.a_vertices, 2, gl.FLOAT, false, 0, 0);
gl.bufferData(gl.ARRAY_BUFFER, screenQuad, gl.STATIC_DRAW);
slider.type = 'range';
slider.min = '0';
slider.max = '0.1';
slider.step = '0.01';
slider.value = settings.K.toString();
slider.addEventListener('input', function (_) { return settings.K = Number(slider.value); });
canvas.width = AREA[0];
canvas.height = AREA[1];
canvas.style.boxSizing = 'border-box';
canvas.style.border = '2px solid Coral';
document.body.style.margin = '0',
    document.body.style.backgroundColor = 'MistyRose';
document.body.appendChild(canvas);
document.body.appendChild(slider);
gl.viewport(0, 0, AREA[0], AREA[1]);
gl.enable(gl.CULL_FACE);
gl.clearColor(0, 0, 0, 0);
gl.useProgram(program);
requestAnimationFrame(function render() {
    var t = performance.now();
    var buffer = 1.05;
    if (t > 1000) {
        for (var i = 0; i < 2 * SPHERE_COUNT; i += 2) {
            positions[i] = range_1.wrap(-AREA[0] * buffer, AREA[0] * buffer, positions[i] + velocities[i]);
            positions[i + 1] = range_1.wrap(-AREA[1] * buffer, AREA[1] * buffer, positions[i + 1] + velocities[i + 1]);
        }
    }
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.uniform1f(u_locations.u_time, performance.now());
    gl.uniform2f(u_locations.u_resolution, AREA[0], AREA[1]);
    gl.uniform1f(u_locations.u_K, settings.K);
    gl.uniform3f(u_locations.u_color, settings.color[0], settings.color[1], settings.color[2]);
    gl.uniform1fv(u_locations.u_radii, radii);
    gl.uniform2fv(u_locations.u_positions, positions);
    gl.drawArrays(gl.TRIANGLES, 0, quadSize);
    requestAnimationFrame(render);
});

},{"./utils/random":2,"./utils/range":3}],2:[function(require,module,exports){
"use strict";
function randInt(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}
exports.randInt = randInt;

},{}],3:[function(require,module,exports){
"use strict";
function wrap(min, max, val) {
    if (val > max)
        return min + (val - max);
    else if (val < min)
        return max + (min - val);
    else
        return val;
}
exports.wrap = wrap;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzL3dhdGNoaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvbWFpbi50cyIsInNyYy91dGlscy9yYW5kb20udHMiLCJzcmMvdXRpbHMvcmFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQUEseUNBQXdDO0FBQ3hDLHVDQUFvQztBQUVwQyxJQUFNLFlBQVksR0FBRyxHQUFHLENBQUE7QUFDeEIsSUFBTSxJQUFJLEdBQUcsQ0FBRSxHQUFHLEVBQUUsR0FBRyxDQUFFLENBQUE7QUFFekIsSUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDNUMsSUFBTSxTQUFTLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFBO0FBQ3BELElBQU0sVUFBVSxHQUFHLElBQUksWUFBWSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQTtBQUNyRCxJQUFNLFFBQVEsR0FBRztJQUNmLENBQUMsRUFBRSxHQUFHO0lBQ04sS0FBSyxFQUFFLENBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUU7Q0FDdEIsQ0FBQTtBQUVELEdBQUcsQ0FBQyxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFHLENBQUM7SUFDeEMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLGdCQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3pCLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsZ0JBQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDdEMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsZ0JBQU8sQ0FBQyxDQUFDLEVBQUUsSUFB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QUUsR0FBRyxHQUFHLEdBQUcsQ0FBRSxDQUFBO0lBQ2hELElBQUk7UUFBa0IsTUFBTSxDQUFDLEdBQUcsQ0FBQTtBQUNsQyxDQUFDO0FBSkQsb0JBSUMiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiaW1wb3J0IHsgcmFuZEludCB9IGZyb20gJy4vdXRpbHMvcmFuZG9tJ1xuaW1wb3J0IHsgd3JhcCB9IGZyb20gJy4vdXRpbHMvcmFuZ2UnXG5cbmNvbnN0IFNQSEVSRV9DT1VOVCA9IDQwMFxuY29uc3QgQVJFQSA9IFsgODAwLCA0NTAgXVxuXG5jb25zdCByYWRpaSA9IG5ldyBGbG9hdDMyQXJyYXkoU1BIRVJFX0NPVU5UKVxuY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSgyICogU1BIRVJFX0NPVU5UKVxuY29uc3QgdmVsb2NpdGllcyA9IG5ldyBGbG9hdDMyQXJyYXkoMiAqIFNQSEVSRV9DT1VOVClcbmNvbnN0IHNldHRpbmdzID0ge1xuICBLOiAwLjEsXG4gIGNvbG9yOiBbIC4yLCAuNCwgLjggXVxufVxuXG5mb3IgKCB2YXIgaSA9IDA7IGkgPCBTUEhFUkVfQ09VTlQ7IGkrKyApIHtcbiAgcmFkaWlbaV0gPSByYW5kSW50KDQsIDMwKVxuICBwb3NpdGlvbnNbaSAqIDJdID0gcmFuZEludCgwLCBBUkVBWzBdKVxuICBwb3NpdGlvbnNbaSAqIDIgKyAxXSA9IHJhbmRJbnQoMCwgQVJFQVsxXSlcbiAgdmVsb2NpdGllc1tpICogMl0gPSByYW5kSW50KC00LCA0KVxuICB2ZWxvY2l0aWVzW2kgKiAyICsgMV0gPSByYW5kSW50KC00LCA0KVxufVxuXG5jb25zdCB2c3JjID0gXG5gXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxuYXR0cmlidXRlIHZlYzIgYV92ZXJ0aWNlcztcblxudm9pZCBtYWluICgpIHtcbiAgZ2xfUG9zaXRpb24gPSB2ZWM0KGFfdmVydGljZXMsIDEuMCwgMS4wKTtcbn1cbmBcblxuY29uc3QgZnNyYyA9XG5gXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcblxudW5pZm9ybSB2ZWMyIHVfcmVzb2x1dGlvbjtcbnVuaWZvcm0gZmxvYXQgdV90aW1lO1xudW5pZm9ybSBmbG9hdCB1X0s7XG51bmlmb3JtIHZlYzMgdV9jb2xvcjtcbnVuaWZvcm0gZmxvYXQgdV9yYWRpaSBbICR7IFNQSEVSRV9DT1VOVCB9IF07XG51bmlmb3JtIHZlYzIgdV9wb3NpdGlvbnMgWyAkeyBTUEhFUkVfQ09VTlQgfSBdO1xuXG5mbG9hdCBzZGZfc3BoZXJlICggZmxvYXQgciwgdmVjMiBjLCB2ZWMyIHAgKSB7XG4gIHJldHVybiBkaXN0YW5jZShwLCBjKSAtIHI7XG59XG5cbnZvaWQgbWFpbiAoKSB7XG4gIHZlYzIgcCA9IGdsX0ZyYWdDb29yZC54eTtcbiAgZmxvYXQgZGlzdCA9IDAuO1xuXG4gIGZvciAoIGludCBpID0gMDsgaSA8ICR7IFNQSEVSRV9DT1VOVCB9OyBpKysgKSB7XG4gICAgZGlzdCArPSBleHAoLXVfSyAqIHNkZl9zcGhlcmUodV9yYWRpaVtpXSwgdV9wb3NpdGlvbnNbaV0sIHApKTtcbiAgfVxuICBkaXN0ID0gLWxvZyhkaXN0KSAvIHVfSztcbiAgZmxvYXQgb3BhY2l0eSA9IGNsYW1wKC41IC0gZGlzdCwgMC4wLCAxLjApO1xuXG4gIGdsX0ZyYWdDb2xvciA9IHZlYzQodV9jb2xvciwgb3BhY2l0eSk7XG59XG5gXG5cbmNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpXG5jb25zdCBzbGlkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpXG5jb25zdCBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcpXG5cbmlmICggZ2wgPT0gbnVsbCApIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdnbCBjb250ZXh0IGNvdWxkIG5vdCBiZSBvYnRhaW5lZCcpXG59XG5cbmNvbnN0IHZlcnRleCA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKVxuY29uc3QgZnJhZ21lbnQgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKVxuY29uc3QgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKVxuY29uc3Qgc2NyZWVuUXVhZCA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAtMSwgMSwgLTEsIC0xLCAxLCAtMSxcbiAgLTEsIDEsIDEsIC0xLCAxLCAxXG5dKSBcbmNvbnN0IHF1YWRTaXplID0gc2NyZWVuUXVhZC5sZW5ndGggLyAyIFxuXG5pZiAoIHZlcnRleCA9PSBudWxsICYmIGZyYWdtZW50ID09IG51bGwgJiYgcHJvZ3JhbSA9PSBudWxsICkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2dsIHJlc291cmNlcyBjb3VsZCBub3QgYmUgb2J0YWluZWQnKVxufVxuXG5nbC5zaGFkZXJTb3VyY2UodmVydGV4LCB2c3JjKVxuZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXgpXG5nbC5zaGFkZXJTb3VyY2UoZnJhZ21lbnQsIGZzcmMpXG5nbC5jb21waWxlU2hhZGVyKGZyYWdtZW50KVxuXG5nbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4KVxuZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50KVxuZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSlcbmdsLnVzZVByb2dyYW0ocHJvZ3JhbSlcblxuaWYgKCAhZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykgKSB7XG4gIGNvbnNvbGUubG9nKGdsLmdldFNoYWRlckluZm9Mb2codmVydGV4KSlcbiAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyhmcmFnbWVudCkpXG4gIGNvbnNvbGUubG9nKGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pKVxufVxuXG5jb25zdCB2ZXJ0aWNlc0J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpXG5jb25zdCBhX2xvY2F0aW9ucyA9IHtcbiAgYV92ZXJ0aWNlczogZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgJ2FfdmVydGljZXMnKVxufVxuY29uc3QgdV9sb2NhdGlvbnMgPSB7XG4gIHVfSzogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1X0snKSBhcyBXZWJHTFVuaWZvcm1Mb2NhdGlvbixcbiAgdV9jb2xvcjogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1X2NvbG9yJykgYXMgV2ViR0xVbmlmb3JtTG9jYXRpb24sXG4gIHVfdGltZTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1X3RpbWUnKSBhcyBXZWJHTFVuaWZvcm1Mb2NhdGlvbixcbiAgdV9yZXNvbHV0aW9uOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VfcmVzb2x1dGlvbicpIGFzIFdlYkdMVW5pZm9ybUxvY2F0aW9uLFxuICB1X3JhZGlpOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VfcmFkaWknKSBhcyBXZWJHTFVuaWZvcm1Mb2NhdGlvbixcbiAgdV9wb3NpdGlvbnM6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndV9wb3NpdGlvbnMnKSBhcyBXZWJHTFVuaWZvcm1Mb2NhdGlvblxufVxuXG5nbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdmVydGljZXNCdWZmZXIpXG5nbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhX2xvY2F0aW9ucy5hX3ZlcnRpY2VzKVxuZ2wudmVydGV4QXR0cmliUG9pbnRlcihhX2xvY2F0aW9ucy5hX3ZlcnRpY2VzLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApXG5nbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgc2NyZWVuUXVhZCwgZ2wuU1RBVElDX0RSQVcpXG5cbnNsaWRlci50eXBlID0gJ3JhbmdlJ1xuc2xpZGVyLm1pbiA9ICcwJ1xuc2xpZGVyLm1heCA9ICcwLjEnXG5zbGlkZXIuc3RlcCA9ICcwLjAxJ1xuc2xpZGVyLnZhbHVlID0gc2V0dGluZ3MuSy50b1N0cmluZygpXG5zbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBfID0+IHNldHRpbmdzLksgPSBOdW1iZXIoc2xpZGVyLnZhbHVlKSlcblxuY2FudmFzLndpZHRoID0gQVJFQVswXVxuY2FudmFzLmhlaWdodCA9IEFSRUFbMV1cbmNhbnZhcy5zdHlsZS5ib3hTaXppbmcgPSAnYm9yZGVyLWJveCdcbmNhbnZhcy5zdHlsZS5ib3JkZXIgPSAnMnB4IHNvbGlkIENvcmFsJ1xuZG9jdW1lbnQuYm9keS5zdHlsZS5tYXJnaW4gPSAnMCcsXG5kb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdNaXN0eVJvc2UnXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcylcbmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2xpZGVyKVxuXG5nbC52aWV3cG9ydCgwLCAwLCBBUkVBWzBdLCBBUkVBWzFdKVxuZ2wuZW5hYmxlKGdsLkNVTExfRkFDRSlcbmdsLmNsZWFyQ29sb3IoMCwgMCwgMCwgMClcbmdsLnVzZVByb2dyYW0ocHJvZ3JhbSlcblxucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgY29uc3QgdCA9IHBlcmZvcm1hbmNlLm5vdygpXG4gIGNvbnN0IGJ1ZmZlciA9IDEuMDVcblxuICBpZiAoIHQgPiAxMDAwICkge1xuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IDIgKiBTUEhFUkVfQ09VTlQ7IGkgKz0gMiApIHtcbiAgICAgIHBvc2l0aW9uc1tpXSA9IHdyYXAoLUFSRUFbMF0gKiBidWZmZXIsIEFSRUFbMF0gKiBidWZmZXIsIHBvc2l0aW9uc1tpXSArIHZlbG9jaXRpZXNbaV0pXG4gICAgICBwb3NpdGlvbnNbaSArIDFdID0gd3JhcCgtQVJFQVsxXSAqIGJ1ZmZlciwgQVJFQVsxXSAqIGJ1ZmZlciwgcG9zaXRpb25zW2kgKyAxXSsgdmVsb2NpdGllc1tpICsgMV0pXG4gICAgfVxuICB9XG4gIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKVxuICBnbC51bmlmb3JtMWYodV9sb2NhdGlvbnMudV90aW1lLCBwZXJmb3JtYW5jZS5ub3coKSlcbiAgZ2wudW5pZm9ybTJmKHVfbG9jYXRpb25zLnVfcmVzb2x1dGlvbiwgQVJFQVswXSwgQVJFQVsxXSlcbiAgZ2wudW5pZm9ybTFmKHVfbG9jYXRpb25zLnVfSywgc2V0dGluZ3MuSylcbiAgZ2wudW5pZm9ybTNmKHVfbG9jYXRpb25zLnVfY29sb3IsIHNldHRpbmdzLmNvbG9yWzBdLCBzZXR0aW5ncy5jb2xvclsxXSwgc2V0dGluZ3MuY29sb3JbMl0pXG4gIGdsLnVuaWZvcm0xZnYodV9sb2NhdGlvbnMudV9yYWRpaSwgcmFkaWkpXG4gIGdsLnVuaWZvcm0yZnYodV9sb2NhdGlvbnMudV9wb3NpdGlvbnMsIHBvc2l0aW9ucylcbiAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIHF1YWRTaXplKVxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKVxufSlcbiIsImV4cG9ydCBmdW5jdGlvbiByYW5kSW50ICggbWluOiBudW1iZXIsIG1heDogbnVtYmVyICk6IG51bWJlciB7XG4gIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoIG1heCAtIG1pbiApICsgbWluKVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHdyYXAgKCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIHZhbDogbnVtYmVyICk6IG51bWJlciB7XG4gIGlmICAgICAgKCB2YWwgPiBtYXggKSByZXR1cm4gbWluICsgKCB2YWwgLSBtYXggKVxuICBlbHNlIGlmICggdmFsIDwgbWluICkgcmV0dXJuIG1heCArICggbWluIC0gdmFsIClcbiAgZWxzZSAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxcbn1cbiJdfQ==
