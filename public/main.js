(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var random_1 = require("./utils/random");
var range_1 = require("./utils/range");
var SPHERE_COUNT = 400;
var AREA = [800, 450];
var radii = new Float32Array(SPHERE_COUNT);
var positions = new Float32Array(2 * SPHERE_COUNT);
var velocities = new Float32Array(2 * SPHERE_COUNT);
var settings = {
    K: 0.1,
    color: [.2, .4, .8]
};
for (var i = 0; i < SPHERE_COUNT; i++) {
    radii[i] = random_1.randInt(4, 30);
    positions[i * 2] = random_1.randInt(0, AREA[0]);
    positions[i * 2 + 1] = random_1.randInt(0, AREA[1]);
    velocities[i * 2] = random_1.randInt(-4, 4);
    velocities[i * 2 + 1] = random_1.randInt(-4, 4);
}
var vsrc = "\nprecision mediump float;\n\nattribute vec2 a_vertices;\n\nvoid main () {\n  gl_Position = vec4(a_vertices, 1.0, 1.0);\n}\n";
var fsrc = "\nprecision mediump float;\n\nuniform vec2 u_resolution;\nuniform float u_time;\nuniform float u_K;\nuniform vec3 u_color;\nuniform float u_radii [ " + SPHERE_COUNT + " ];\nuniform vec2 u_positions [ " + SPHERE_COUNT + " ];\n\nfloat sdf_sphere ( float r, vec2 c, vec2 p ) {\n  return distance(p, c) - r;\n}\n\nvoid main () {\n  vec2 p = gl_FragCoord.xy;\n  float dist = 0.;\n\n  for ( int i = 0; i < " + SPHERE_COUNT + "; i++ ) {\n    dist += exp(-u_K * sdf_sphere(u_radii[i], u_positions[i], p));\n  }\n  dist = -log(dist) / u_K;\n  float opacity = clamp(.5 - dist, 0.0, 1.0);\n\n  gl_FragColor = vec4(u_color, opacity);\n}\n";
var canvas = document.createElement('canvas');
var slider = document.createElement('input');
var gl = canvas.getContext('webgl');
if (gl == null) {
    throw new Error('gl context could not be obtained');
}
var vertex = gl.createShader(gl.VERTEX_SHADER);
var fragment = gl.createShader(gl.FRAGMENT_SHADER);
var program = gl.createProgram();
var screenQuad = new Float32Array([
    -1, 1, -1, -1, 1, -1,
    -1, 1, 1, -1, 1, 1
]);
var quadSize = screenQuad.length / 2;
if (vertex == null && fragment == null && program == null) {
    throw new Error('gl resources could not be obtained');
}
gl.shaderSource(vertex, vsrc);
gl.compileShader(vertex);
gl.shaderSource(fragment, fsrc);
gl.compileShader(fragment);
gl.attachShader(program, vertex);
gl.attachShader(program, fragment);
gl.linkProgram(program);
gl.useProgram(program);
if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.log(gl.getShaderInfoLog(vertex));
    console.log(gl.getShaderInfoLog(fragment));
    console.log(gl.getProgramInfoLog(program));
}
var verticesBuffer = gl.createBuffer();
var a_locations = {
    a_vertices: gl.getAttribLocation(program, 'a_vertices')
};
var u_locations = {
    u_K: gl.getUniformLocation(program, 'u_K'),
    u_color: gl.getUniformLocation(program, 'u_color'),
    u_time: gl.getUniformLocation(program, 'u_time'),
    u_resolution: gl.getUniformLocation(program, 'u_resolution'),
    u_radii: gl.getUniformLocation(program, 'u_radii'),
    u_positions: gl.getUniformLocation(program, 'u_positions')
};
gl.bindBuffer(gl.ARRAY_BUFFER, verticesBuffer);
gl.enableVertexAttribArray(a_locations.a_vertices);
gl.vertexAttribPointer(a_locations.a_vertices, 2, gl.FLOAT, false, 0, 0);
gl.bufferData(gl.ARRAY_BUFFER, screenQuad, gl.STATIC_DRAW);
slider.type = 'range';
slider.min = '0';
slider.max = '0.1';
slider.step = '0.01';
slider.value = settings.K.toString();
slider.addEventListener('input', function (_) { return settings.K = Number(slider.value); });
canvas.width = AREA[0];
canvas.height = AREA[1];
canvas.style.boxSizing = 'border-box';
canvas.style.border = '2px solid Coral';
document.body.style.margin = '0',
    document.body.style.backgroundColor = 'MistyRose';
document.body.appendChild(canvas);
document.body.appendChild(slider);
gl.viewport(0, 0, AREA[0], AREA[1]);
gl.enable(gl.CULL_FACE);
gl.clearColor(0, 0, 0, 0);
gl.useProgram(program);
var start = Date.now();
var raf = window.requestAnimationFrame;
raf(function render() {
    var time = Date.now();
    var buffer = 1.05;
    if (time - start > 1000) {
        for (var i = 0; i < 2 * SPHERE_COUNT; i += 2) {
            positions[i] = range_1.wrap(-AREA[0] * buffer, AREA[0] * buffer, positions[i] + velocities[i]);
            positions[i + 1] = range_1.wrap(-AREA[1] * buffer, AREA[1] * buffer, positions[i + 1] + velocities[i + 1]);
        }
    }
    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
    gl.uniform1f(u_locations.u_time, time);
    gl.uniform2f(u_locations.u_resolution, AREA[0], AREA[1]);
    gl.uniform1f(u_locations.u_K, settings.K);
    gl.uniform3f(u_locations.u_color, settings.color[0], settings.color[1], settings.color[2]);
    gl.uniform1fv(u_locations.u_radii, radii);
    gl.uniform2fv(u_locations.u_positions, positions);
    gl.drawArrays(gl.TRIANGLES, 0, quadSize);
    raf(render);
});

},{"./utils/random":2,"./utils/range":3}],2:[function(require,module,exports){
"use strict";
function randInt(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}
exports.randInt = randInt;

},{}],3:[function(require,module,exports){
"use strict";
function wrap(min, max, val) {
    if (val > max)
        return min + (val - max);
    else if (val < min)
        return max + (min - val);
    else
        return val;
}
exports.wrap = wrap;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Vzci9sb2NhbC9saWIvbm9kZV9tb2R1bGVzL3dhdGNoaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvbWFpbi50cyIsInNyYy91dGlscy9yYW5kb20udHMiLCJzcmMvdXRpbHMvcmFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FDQUEseUNBQXdDO0FBQ3hDLHVDQUFvQztBQUVwQyxJQUFNLFlBQVksR0FBRyxHQUFHLENBQUE7QUFDeEIsSUFBTSxJQUFJLEdBQUcsQ0FBRSxHQUFHLEVBQUUsR0FBRyxDQUFFLENBQUE7QUFFekIsSUFBTSxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQUMsWUFBWSxDQUFDLENBQUE7QUFDNUMsSUFBTSxTQUFTLEdBQUcsSUFBSSxZQUFZLENBQUMsQ0FBQyxHQUFHLFlBQVksQ0FBQyxDQUFBO0FBQ3BELElBQU0sVUFBVSxHQUFHLElBQUksWUFBWSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsQ0FBQTtBQUNyRCxJQUFNLFFBQVEsR0FBRztJQUNmLENBQUMsRUFBRSxHQUFHO0lBQ04sS0FBSyxFQUFFLENBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUU7Q0FDdEIsQ0FBQTtBQUVELEdBQUcsQ0FBQyxDQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFHLENBQUM7SUFDeEMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLGdCQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ3pCLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsZ0JBQU8sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDdEMsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsZ0JBQU8sQ0FBQyxDQUFDLEVBQUUsSUFB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O0lBQ2hELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBRSxHQUFHLEdBQUcsR0FBSSxDQUFDO1FBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFFLEdBQUcsR0FBRyxHQUFHLENBQUUsQ0FBQTtJQUNoRCxJQUFJO1FBQWtCLE1BQU0sQ0FBQyxHQUFHLENBQUE7QUFDbEMsQ0FBQztBQUpELG9CQUlDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImltcG9ydCB7IHJhbmRJbnQgfSBmcm9tICcuL3V0aWxzL3JhbmRvbSdcbmltcG9ydCB7IHdyYXAgfSBmcm9tICcuL3V0aWxzL3JhbmdlJ1xuXG5jb25zdCBTUEhFUkVfQ09VTlQgPSA0MDBcbmNvbnN0IEFSRUEgPSBbIDgwMCwgNDUwIF1cblxuY29uc3QgcmFkaWkgPSBuZXcgRmxvYXQzMkFycmF5KFNQSEVSRV9DT1VOVClcbmNvbnN0IHBvc2l0aW9ucyA9IG5ldyBGbG9hdDMyQXJyYXkoMiAqIFNQSEVSRV9DT1VOVClcbmNvbnN0IHZlbG9jaXRpZXMgPSBuZXcgRmxvYXQzMkFycmF5KDIgKiBTUEhFUkVfQ09VTlQpXG5jb25zdCBzZXR0aW5ncyA9IHtcbiAgSzogMC4xLFxuICBjb2xvcjogWyAuMiwgLjQsIC44IF1cbn1cblxuZm9yICggdmFyIGkgPSAwOyBpIDwgU1BIRVJFX0NPVU5UOyBpKysgKSB7XG4gIHJhZGlpW2ldID0gcmFuZEludCg0LCAzMClcbiAgcG9zaXRpb25zW2kgKiAyXSA9IHJhbmRJbnQoMCwgQVJFQVswXSlcbiAgcG9zaXRpb25zW2kgKiAyICsgMV0gPSByYW5kSW50KDAsIEFSRUFbMV0pXG4gIHZlbG9jaXRpZXNbaSAqIDJdID0gcmFuZEludCgtNCwgNClcbiAgdmVsb2NpdGllc1tpICogMiArIDFdID0gcmFuZEludCgtNCwgNClcbn1cblxuY29uc3QgdnNyYyA9IFxuYFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cbmF0dHJpYnV0ZSB2ZWMyIGFfdmVydGljZXM7XG5cbnZvaWQgbWFpbiAoKSB7XG4gIGdsX1Bvc2l0aW9uID0gdmVjNChhX3ZlcnRpY2VzLCAxLjAsIDEuMCk7XG59XG5gXG5cbmNvbnN0IGZzcmMgPVxuYFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XG5cbnVuaWZvcm0gdmVjMiB1X3Jlc29sdXRpb247XG51bmlmb3JtIGZsb2F0IHVfdGltZTtcbnVuaWZvcm0gZmxvYXQgdV9LO1xudW5pZm9ybSB2ZWMzIHVfY29sb3I7XG51bmlmb3JtIGZsb2F0IHVfcmFkaWkgWyAkeyBTUEhFUkVfQ09VTlQgfSBdO1xudW5pZm9ybSB2ZWMyIHVfcG9zaXRpb25zIFsgJHsgU1BIRVJFX0NPVU5UIH0gXTtcblxuZmxvYXQgc2RmX3NwaGVyZSAoIGZsb2F0IHIsIHZlYzIgYywgdmVjMiBwICkge1xuICByZXR1cm4gZGlzdGFuY2UocCwgYykgLSByO1xufVxuXG52b2lkIG1haW4gKCkge1xuICB2ZWMyIHAgPSBnbF9GcmFnQ29vcmQueHk7XG4gIGZsb2F0IGRpc3QgPSAwLjtcblxuICBmb3IgKCBpbnQgaSA9IDA7IGkgPCAkeyBTUEhFUkVfQ09VTlQgfTsgaSsrICkge1xuICAgIGRpc3QgKz0gZXhwKC11X0sgKiBzZGZfc3BoZXJlKHVfcmFkaWlbaV0sIHVfcG9zaXRpb25zW2ldLCBwKSk7XG4gIH1cbiAgZGlzdCA9IC1sb2coZGlzdCkgLyB1X0s7XG4gIGZsb2F0IG9wYWNpdHkgPSBjbGFtcCguNSAtIGRpc3QsIDAuMCwgMS4wKTtcblxuICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHVfY29sb3IsIG9wYWNpdHkpO1xufVxuYFxuXG5jb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuY29uc3Qgc2xpZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKVxuY29uc3QgZ2wgPSBjYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnKVxuXG5pZiAoIGdsID09IG51bGwgKSB7XG4gIHRocm93IG5ldyBFcnJvcignZ2wgY29udGV4dCBjb3VsZCBub3QgYmUgb2J0YWluZWQnKVxufVxuXG5jb25zdCB2ZXJ0ZXggPSBnbC5jcmVhdGVTaGFkZXIoZ2wuVkVSVEVYX1NIQURFUilcbmNvbnN0IGZyYWdtZW50ID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUilcbmNvbnN0IHByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKClcbmNvbnN0IHNjcmVlblF1YWQgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgLTEsIDEsIC0xLCAtMSwgMSwgLTEsXG4gIC0xLCAxLCAxLCAtMSwgMSwgMVxuXSkgXG5jb25zdCBxdWFkU2l6ZSA9IHNjcmVlblF1YWQubGVuZ3RoIC8gMiBcblxuaWYgKCB2ZXJ0ZXggPT0gbnVsbCAmJiBmcmFnbWVudCA9PSBudWxsICYmIHByb2dyYW0gPT0gbnVsbCApIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdnbCByZXNvdXJjZXMgY291bGQgbm90IGJlIG9idGFpbmVkJylcbn1cblxuZ2wuc2hhZGVyU291cmNlKHZlcnRleCwgdnNyYylcbmdsLmNvbXBpbGVTaGFkZXIodmVydGV4KVxuZ2wuc2hhZGVyU291cmNlKGZyYWdtZW50LCBmc3JjKVxuZ2wuY29tcGlsZVNoYWRlcihmcmFnbWVudClcblxuZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleClcbmdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudClcbmdsLmxpbmtQcm9ncmFtKHByb2dyYW0pXG5nbC51c2VQcm9ncmFtKHByb2dyYW0pXG5cbmlmICggIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpICkge1xuICBjb25zb2xlLmxvZyhnbC5nZXRTaGFkZXJJbmZvTG9nKHZlcnRleCkpXG4gIGNvbnNvbGUubG9nKGdsLmdldFNoYWRlckluZm9Mb2coZnJhZ21lbnQpKVxuICBjb25zb2xlLmxvZyhnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKSlcbn1cblxuY29uc3QgdmVydGljZXNCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKVxuY29uc3QgYV9sb2NhdGlvbnMgPSB7XG4gIGFfdmVydGljZXM6IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sICdhX3ZlcnRpY2VzJylcbn1cbmNvbnN0IHVfbG9jYXRpb25zID0ge1xuICB1X0s6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndV9LJykgYXMgV2ViR0xVbmlmb3JtTG9jYXRpb24sXG4gIHVfY29sb3I6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndV9jb2xvcicpIGFzIFdlYkdMVW5pZm9ybUxvY2F0aW9uLFxuICB1X3RpbWU6IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAndV90aW1lJykgYXMgV2ViR0xVbmlmb3JtTG9jYXRpb24sXG4gIHVfcmVzb2x1dGlvbjogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1X3Jlc29sdXRpb24nKSBhcyBXZWJHTFVuaWZvcm1Mb2NhdGlvbixcbiAgdV9yYWRpaTogZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICd1X3JhZGlpJykgYXMgV2ViR0xVbmlmb3JtTG9jYXRpb24sXG4gIHVfcG9zaXRpb25zOiBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgJ3VfcG9zaXRpb25zJykgYXMgV2ViR0xVbmlmb3JtTG9jYXRpb25cbn1cblxuZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHZlcnRpY2VzQnVmZmVyKVxuZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYV9sb2NhdGlvbnMuYV92ZXJ0aWNlcylcbmdsLnZlcnRleEF0dHJpYlBvaW50ZXIoYV9sb2NhdGlvbnMuYV92ZXJ0aWNlcywgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKVxuZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHNjcmVlblF1YWQsIGdsLlNUQVRJQ19EUkFXKVxuXG5zbGlkZXIudHlwZSA9ICdyYW5nZSdcbnNsaWRlci5taW4gPSAnMCdcbnNsaWRlci5tYXggPSAnMC4xJ1xuc2xpZGVyLnN0ZXAgPSAnMC4wMSdcbnNsaWRlci52YWx1ZSA9IHNldHRpbmdzLksudG9TdHJpbmcoKVxuc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgXyA9PiBzZXR0aW5ncy5LID0gTnVtYmVyKHNsaWRlci52YWx1ZSkpXG5cbmNhbnZhcy53aWR0aCA9IEFSRUFbMF1cbmNhbnZhcy5oZWlnaHQgPSBBUkVBWzFdXG5jYW52YXMuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnXG5jYW52YXMuc3R5bGUuYm9yZGVyID0gJzJweCBzb2xpZCBDb3JhbCdcbmRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gJzAnLFxuZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnTWlzdHlSb3NlJ1xuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpXG5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNsaWRlcilcblxuZ2wudmlld3BvcnQoMCwgMCwgQVJFQVswXSwgQVJFQVsxXSlcbmdsLmVuYWJsZShnbC5DVUxMX0ZBQ0UpXG5nbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApXG5nbC51c2VQcm9ncmFtKHByb2dyYW0pXG5cbmNvbnN0IHN0YXJ0ID0gRGF0ZS5ub3coKVxuY29uc3QgcmFmID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuXG5yYWYoZnVuY3Rpb24gcmVuZGVyKCkge1xuICBjb25zdCB0aW1lID0gRGF0ZS5ub3coKVxuICBjb25zdCBidWZmZXIgPSAxLjA1XG5cbiAgaWYgKCB0aW1lIC0gc3RhcnQgPiAxMDAwICkge1xuICAgIGZvciAoIHZhciBpID0gMDsgaSA8IDIgKiBTUEhFUkVfQ09VTlQ7IGkgKz0gMiApIHtcbiAgICAgIHBvc2l0aW9uc1tpXSA9IHdyYXAoLUFSRUFbMF0gKiBidWZmZXIsIEFSRUFbMF0gKiBidWZmZXIsIHBvc2l0aW9uc1tpXSArIHZlbG9jaXRpZXNbaV0pXG4gICAgICBwb3NpdGlvbnNbaSArIDFdID0gd3JhcCgtQVJFQVsxXSAqIGJ1ZmZlciwgQVJFQVsxXSAqIGJ1ZmZlciwgcG9zaXRpb25zW2kgKyAxXSsgdmVsb2NpdGllc1tpICsgMV0pXG4gICAgfVxuICB9XG4gIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKVxuICBnbC51bmlmb3JtMWYodV9sb2NhdGlvbnMudV90aW1lLCB0aW1lKVxuICBnbC51bmlmb3JtMmYodV9sb2NhdGlvbnMudV9yZXNvbHV0aW9uLCBBUkVBWzBdLCBBUkVBWzFdKVxuICBnbC51bmlmb3JtMWYodV9sb2NhdGlvbnMudV9LLCBzZXR0aW5ncy5LKVxuICBnbC51bmlmb3JtM2YodV9sb2NhdGlvbnMudV9jb2xvciwgc2V0dGluZ3MuY29sb3JbMF0sIHNldHRpbmdzLmNvbG9yWzFdLCBzZXR0aW5ncy5jb2xvclsyXSlcbiAgZ2wudW5pZm9ybTFmdih1X2xvY2F0aW9ucy51X3JhZGlpLCByYWRpaSlcbiAgZ2wudW5pZm9ybTJmdih1X2xvY2F0aW9ucy51X3Bvc2l0aW9ucywgcG9zaXRpb25zKVxuICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgcXVhZFNpemUpXG4gIHJhZihyZW5kZXIpXG59KVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHJhbmRJbnQgKCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIgKTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICggbWF4IC0gbWluICkgKyBtaW4pXG59XG4iLCJleHBvcnQgZnVuY3Rpb24gd3JhcCAoIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgdmFsOiBudW1iZXIgKTogbnVtYmVyIHtcbiAgaWYgICAgICAoIHZhbCA+IG1heCApIHJldHVybiBtaW4gKyAoIHZhbCAtIG1heCApXG4gIGVsc2UgaWYgKCB2YWwgPCBtaW4gKSByZXR1cm4gbWF4ICsgKCBtaW4gLSB2YWwgKVxuICBlbHNlICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbFxufVxuIl19
